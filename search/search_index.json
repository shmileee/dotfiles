{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dotfiles \u00b6 Welcome! This is the documentation for my dotfiles repository. Getting Started \u00b6 The preferred method of installation is to do a fresh install of macOS or Debian based Linux, then run the automated setup script: curl -fsSL oponomarov.com/d | sh -s -- --all To learn about the rationale behind my setup, how to use it, what features are available and how to tweak the configurations to suit your tastes, please read the Usage Guide section. Highlights \u00b6 Sane macOS defaults Fast and colored prompt Well-organized and easy to customize Minimal efforts to install everything Mostly based around Ansible, Homebrew and Chezmoi Single responsibility principle - one tool manages one thing The installation and setup is tested weekly on: real Ubuntu + macOS machines Ubuntu 20.04 Docker container Supports both Apple Silicon (M1) and Intel chips Battle-tested Warning The dotfiles repository is still in \"early\" development stage. While providing mostly a usable system out of the box, some functionality might still be missing.","title":"Dotfiles"},{"location":"#dotfiles","text":"Welcome! This is the documentation for my dotfiles repository.","title":"Dotfiles"},{"location":"#getting-started","text":"The preferred method of installation is to do a fresh install of macOS or Debian based Linux, then run the automated setup script: curl -fsSL oponomarov.com/d | sh -s -- --all To learn about the rationale behind my setup, how to use it, what features are available and how to tweak the configurations to suit your tastes, please read the Usage Guide section.","title":"Getting Started"},{"location":"#highlights","text":"Sane macOS defaults Fast and colored prompt Well-organized and easy to customize Minimal efforts to install everything Mostly based around Ansible, Homebrew and Chezmoi Single responsibility principle - one tool manages one thing The installation and setup is tested weekly on: real Ubuntu + macOS machines Ubuntu 20.04 Docker container Supports both Apple Silicon (M1) and Intel chips Battle-tested Warning The dotfiles repository is still in \"early\" development stage. While providing mostly a usable system out of the box, some functionality might still be missing.","title":"Highlights"},{"location":"features/1-UsageGuide/","text":"Usage Guide \u00b6 In this section you will find write-ups on most used tools, programs, and custom scripts. Refer to each individual page for more details. Table of Contents \u00b6 Rationale Tools Installation Hotkeys Window Management","title":"Usage Guide"},{"location":"features/1-UsageGuide/#usage-guide","text":"In this section you will find write-ups on most used tools, programs, and custom scripts. Refer to each individual page for more details.","title":"Usage Guide"},{"location":"features/1-UsageGuide/#table-of-contents","text":"Rationale Tools Installation Hotkeys Window Management","title":"Table of Contents"},{"location":"features/Rationale/","text":"Rationale \u00b6 Goal \u00b6 Provide fully automated development environment that is easy to setup and maintain. Why Ansible? \u00b6 In my experience Ansible has the easiest learning curve. It has its own caveats and gotchas, but overall it's pretty straightforward to read YAML configuration for a person that knows very little about how Ansible works. It's almost like reading plain English with very rare exceptions. Additionally, Ansible is a Swiss army knife orchestration tool. You can use it and abuse it in many different ways which might or might not be supported via other popular solution like NixOS Home Manager otherwise. One of the biggest advantages of Ansible is that (if properly described) tasks follow idempotency principle, which means playbook can be run over and over again without having to worry about your precious files accidentally being removed. All in all - there are many automation solutions out there - I happen to enjoy using Ansible. Why Chezmoi? \u00b6 Chezmoi is another tool for managing dotfiles. It seems to be the most popular choice these days with over 6k+ stars. Prior to switch, I've used GNU Stow which had it's job done but unfortunately lacked a couple of features chezmoi tends to resolve. The most important features of chezmoi: Flexible : dotfiles can be templates (using text/template syntax). While this can be achieved using Ansible builtin Jinja templates, - chezmoi provides a set of variables that can be used inside the template for simple assertions like the platform you're currently running on, architecture, hostname, environmental variables lookup and many more. Additionally, testing Jinja templates in Ansible is very cumbersome. With chezmoi this is as simple as running chezmoi execute-template < file.tmpl . Portable : chezmoi's configuration uses only visible, regular files and directories and so is portable across version control systems and operating systems. Transparent : chezmoi includes verbose and dry run modes so you can review exactly what changes it will make to your home directory before making them. Practical : chezmoi manages hidden files (dot files), directories, private, and executable files. Fast, easy to use, and familiar : chezmoi runs in fractions of a second and includes commands to make most operations trivial. The biggest driver for choosing chezmoi was my intention to follow single responsibility principle: dotfiles should be managed separately. Why LunarVim? \u00b6 I used regular Vim for a couple of years until it has become really painful to manage a 500+ lines file. I've made an attempt to switch to Neovim after watching Vimconf hosted by ThePrimagen and TJ DeVries . This switch made me realize I don't understand half of the Lua configuration. Luckily, it turned out that most of the keymaps, plugins and sane defaults I was trying to configure are not necessarily specific and lots of people tend to configure Neovim this way. In fact, LunarVim does this pretty well by providing a community driven framework for Neovim that acts like a wrapper with a bunch of common plugins. I happen to enjoy most of the stuff they ship out of the box. As an experienced Vim user, I found I only needed to install a couple more plugins to feel comfortable, rebind a couple of keys and configure less than 10 options. Why Fish? \u00b6 Fish ecosystem is great for interactive shells. I still write day-to-day scripts in pure bash, but the amount of features that comes preconfigured with fish is just too good to resist. Warning Fish is not POSIX compatible shell.","title":"Rationale"},{"location":"features/Rationale/#rationale","text":"","title":"Rationale"},{"location":"features/Rationale/#goal","text":"Provide fully automated development environment that is easy to setup and maintain.","title":"Goal"},{"location":"features/Rationale/#why-ansible","text":"In my experience Ansible has the easiest learning curve. It has its own caveats and gotchas, but overall it's pretty straightforward to read YAML configuration for a person that knows very little about how Ansible works. It's almost like reading plain English with very rare exceptions. Additionally, Ansible is a Swiss army knife orchestration tool. You can use it and abuse it in many different ways which might or might not be supported via other popular solution like NixOS Home Manager otherwise. One of the biggest advantages of Ansible is that (if properly described) tasks follow idempotency principle, which means playbook can be run over and over again without having to worry about your precious files accidentally being removed. All in all - there are many automation solutions out there - I happen to enjoy using Ansible.","title":"Why Ansible?"},{"location":"features/Rationale/#why-chezmoi","text":"Chezmoi is another tool for managing dotfiles. It seems to be the most popular choice these days with over 6k+ stars. Prior to switch, I've used GNU Stow which had it's job done but unfortunately lacked a couple of features chezmoi tends to resolve. The most important features of chezmoi: Flexible : dotfiles can be templates (using text/template syntax). While this can be achieved using Ansible builtin Jinja templates, - chezmoi provides a set of variables that can be used inside the template for simple assertions like the platform you're currently running on, architecture, hostname, environmental variables lookup and many more. Additionally, testing Jinja templates in Ansible is very cumbersome. With chezmoi this is as simple as running chezmoi execute-template < file.tmpl . Portable : chezmoi's configuration uses only visible, regular files and directories and so is portable across version control systems and operating systems. Transparent : chezmoi includes verbose and dry run modes so you can review exactly what changes it will make to your home directory before making them. Practical : chezmoi manages hidden files (dot files), directories, private, and executable files. Fast, easy to use, and familiar : chezmoi runs in fractions of a second and includes commands to make most operations trivial. The biggest driver for choosing chezmoi was my intention to follow single responsibility principle: dotfiles should be managed separately.","title":"Why Chezmoi?"},{"location":"features/Rationale/#why-lunarvim","text":"I used regular Vim for a couple of years until it has become really painful to manage a 500+ lines file. I've made an attempt to switch to Neovim after watching Vimconf hosted by ThePrimagen and TJ DeVries . This switch made me realize I don't understand half of the Lua configuration. Luckily, it turned out that most of the keymaps, plugins and sane defaults I was trying to configure are not necessarily specific and lots of people tend to configure Neovim this way. In fact, LunarVim does this pretty well by providing a community driven framework for Neovim that acts like a wrapper with a bunch of common plugins. I happen to enjoy most of the stuff they ship out of the box. As an experienced Vim user, I found I only needed to install a couple more plugins to feel comfortable, rebind a couple of keys and configure less than 10 options.","title":"Why LunarVim?"},{"location":"features/Rationale/#why-fish","text":"Fish ecosystem is great for interactive shells. I still write day-to-day scripts in pure bash, but the amount of features that comes preconfigured with fish is just too good to resist. Warning Fish is not POSIX compatible shell.","title":"Why Fish?"},{"location":"features/Tools/","text":"Tools \u00b6 Here's a non-exhaustive list of everything I used in my personal dotfiles. Chezmoi as dotfiles manager. Editor Neovim as primary editor on the command line. LunarVim as primary neovim distribution ( config.lua ). Shell Fish Shell as primary shell ( ~/.config/fish ). Fisher as plugin manager ( fish_plugins ). Tmux as terminal multiplexer ( tmux.conf ). Tmux Plugin Manager as plugin manager. Packages homebrew as primary package manager ( casks + formulas ). asdf as version manager for various system tools ( packages ). Apps Alacritty as terminal emulator ( alacritty.yml ). Brave as primary web browser. Rectangle as windows manager. Fzf as command-line fuzzy finder.","title":"Tools"},{"location":"features/Tools/#tools","text":"Here's a non-exhaustive list of everything I used in my personal dotfiles. Chezmoi as dotfiles manager. Editor Neovim as primary editor on the command line. LunarVim as primary neovim distribution ( config.lua ). Shell Fish Shell as primary shell ( ~/.config/fish ). Fisher as plugin manager ( fish_plugins ). Tmux as terminal multiplexer ( tmux.conf ). Tmux Plugin Manager as plugin manager. Packages homebrew as primary package manager ( casks + formulas ). asdf as version manager for various system tools ( packages ). Apps Alacritty as terminal emulator ( alacritty.yml ). Brave as primary web browser. Rectangle as windows manager. Fzf as command-line fuzzy finder.","title":"Tools"}]}